// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2017 21:48:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    GPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GPU_vlg_sample_tst(
	A,
	B,
	clock,
	En,
	reset,
	w,
	sampler_tx
);
input [7:0] A;
input [0:7] B;
input  clock;
input  En;
input  reset;
input  w;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clock or En or reset or w)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module GPU_vlg_check_tst (
	first_number,
	last_number,
	Q_A,
	Q_B,
	R1,
	R2,
	sign,
	student_id,
	Y,
	sampler_rx
);
input [0:6] first_number;
input [0:6] last_number;
input [7:0] Q_A;
input [7:0] Q_B;
input [3:0] R1;
input [3:0] R2;
input [0:6] sign;
input [0:6] student_id;
input [0:15] Y;
input sampler_rx;

reg [0:6] first_number_expected;
reg [0:6] last_number_expected;
reg [7:0] Q_A_expected;
reg [7:0] Q_B_expected;
reg [3:0] R1_expected;
reg [3:0] R2_expected;
reg [0:6] sign_expected;
reg [0:6] student_id_expected;
reg [0:15] Y_expected;

reg [0:6] first_number_prev;
reg [0:6] last_number_prev;
reg [7:0] Q_A_prev;
reg [7:0] Q_B_prev;
reg [3:0] R1_prev;
reg [3:0] R2_prev;
reg [0:6] sign_prev;
reg [0:6] student_id_prev;
reg [0:15] Y_prev;

reg [0:6] first_number_expected_prev;
reg [0:6] last_number_expected_prev;
reg [7:0] Q_A_expected_prev;
reg [7:0] Q_B_expected_prev;
reg [3:0] R1_expected_prev;
reg [3:0] R2_expected_prev;
reg [0:15] Y_expected_prev;

reg [0:6] last_first_number_exp;
reg [0:6] last_last_number_exp;
reg [7:0] last_Q_A_exp;
reg [7:0] last_Q_B_exp;
reg [3:0] last_R1_exp;
reg [3:0] last_R2_exp;
reg [0:15] last_Y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	first_number_prev = first_number;
	last_number_prev = last_number;
	Q_A_prev = Q_A;
	Q_B_prev = Q_B;
	R1_prev = R1;
	R2_prev = R2;
	sign_prev = sign;
	student_id_prev = student_id;
	Y_prev = Y;
end

// update expected /o prevs

always @(trigger)
begin
	first_number_expected_prev = first_number_expected;
	last_number_expected_prev = last_number_expected;
	Q_A_expected_prev = Q_A_expected;
	Q_B_expected_prev = Q_B_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	Y_expected_prev = Y_expected;
end


// expected Q_A[ 7 ]
initial
begin
	Q_A_expected[7] = 1'bX;
end 
// expected Q_A[ 6 ]
initial
begin
	Q_A_expected[6] = 1'bX;
end 
// expected Q_A[ 5 ]
initial
begin
	Q_A_expected[5] = 1'bX;
end 
// expected Q_A[ 4 ]
initial
begin
	Q_A_expected[4] = 1'bX;
end 
// expected Q_A[ 3 ]
initial
begin
	Q_A_expected[3] = 1'bX;
end 
// expected Q_A[ 2 ]
initial
begin
	Q_A_expected[2] = 1'bX;
end 
// expected Q_A[ 1 ]
initial
begin
	Q_A_expected[1] = 1'bX;
end 
// expected Q_A[ 0 ]
initial
begin
	Q_A_expected[0] = 1'bX;
end 
// expected Q_B[ 7 ]
initial
begin
	Q_B_expected[7] = 1'bX;
end 
// expected Q_B[ 6 ]
initial
begin
	Q_B_expected[6] = 1'bX;
end 
// expected Q_B[ 5 ]
initial
begin
	Q_B_expected[5] = 1'bX;
end 
// expected Q_B[ 4 ]
initial
begin
	Q_B_expected[4] = 1'bX;
end 
// expected Q_B[ 3 ]
initial
begin
	Q_B_expected[3] = 1'bX;
end 
// expected Q_B[ 2 ]
initial
begin
	Q_B_expected[2] = 1'bX;
end 
// expected Q_B[ 1 ]
initial
begin
	Q_B_expected[1] = 1'bX;
end 
// expected Q_B[ 0 ]
initial
begin
	Q_B_expected[0] = 1'bX;
end 
// expected Y[ 15 ]
initial
begin
	Y_expected[15] = 1'bX;
end 
// expected Y[ 14 ]
initial
begin
	Y_expected[14] = 1'bX;
end 
// expected Y[ 13 ]
initial
begin
	Y_expected[13] = 1'bX;
end 
// expected Y[ 12 ]
initial
begin
	Y_expected[12] = 1'bX;
end 
// expected Y[ 11 ]
initial
begin
	Y_expected[11] = 1'bX;
end 
// expected Y[ 10 ]
initial
begin
	Y_expected[10] = 1'bX;
end 
// expected Y[ 9 ]
initial
begin
	Y_expected[9] = 1'bX;
end 
// expected Y[ 8 ]
initial
begin
	Y_expected[8] = 1'bX;
end 
// expected Y[ 7 ]
initial
begin
	Y_expected[7] = 1'bX;
end 
// expected Y[ 6 ]
initial
begin
	Y_expected[6] = 1'bX;
end 
// expected Y[ 5 ]
initial
begin
	Y_expected[5] = 1'bX;
end 
// expected Y[ 4 ]
initial
begin
	Y_expected[4] = 1'bX;
end 
// expected Y[ 3 ]
initial
begin
	Y_expected[3] = 1'bX;
end 
// expected Y[ 2 ]
initial
begin
	Y_expected[2] = 1'bX;
end 
// expected Y[ 1 ]
initial
begin
	Y_expected[1] = 1'bX;
end 
// expected Y[ 0 ]
initial
begin
	Y_expected[0] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 

// expected first_number[0]
initial
begin
	first_number_expected[0] = 1'bX;
end 

// expected first_number[1]
initial
begin
	first_number_expected[1] = 1'bX;
end 

// expected first_number[2]
initial
begin
	first_number_expected[2] = 1'bX;
end 

// expected first_number[3]
initial
begin
	first_number_expected[3] = 1'bX;
end 

// expected first_number[4]
initial
begin
	first_number_expected[4] = 1'bX;
end 

// expected first_number[5]
initial
begin
	first_number_expected[5] = 1'bX;
end 

// expected first_number[6]
initial
begin
	first_number_expected[6] = 1'bX;
end 

// expected last_number[0]
initial
begin
	last_number_expected[0] = 1'bX;
end 

// expected last_number[1]
initial
begin
	last_number_expected[1] = 1'bX;
end 

// expected last_number[2]
initial
begin
	last_number_expected[2] = 1'bX;
end 

// expected last_number[3]
initial
begin
	last_number_expected[3] = 1'bX;
end 

// expected last_number[4]
initial
begin
	last_number_expected[4] = 1'bX;
end 

// expected last_number[5]
initial
begin
	last_number_expected[5] = 1'bX;
end 

// expected last_number[6]
initial
begin
	last_number_expected[6] = 1'bX;
end 
// generate trigger
always @(first_number_expected or first_number or last_number_expected or last_number or Q_A_expected or Q_A or Q_B_expected or Q_B or R1_expected or R1 or R2_expected or R2 or sign_expected or sign or student_id_expected or student_id or Y_expected or Y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected first_number = %b | expected last_number = %b | expected Q_A = %b | expected Q_B = %b | expected R1 = %b | expected R2 = %b | expected sign = %b | expected student_id = %b | expected Y = %b | ",first_number_expected_prev,last_number_expected_prev,Q_A_expected_prev,Q_B_expected_prev,R1_expected_prev,R2_expected_prev,sign_expected_prev,student_id_expected_prev,Y_expected_prev);
	$display("| real first_number = %b | real last_number = %b | real Q_A = %b | real Q_B = %b | real R1 = %b | real R2 = %b | real sign = %b | real student_id = %b | real Y = %b | ",first_number_prev,last_number_prev,Q_A_prev,Q_B_prev,R1_prev,R2_prev,sign_prev,student_id_prev,Y_prev);
`endif
	if (
		( first_number_expected_prev[0] !== 1'bx ) && ( first_number_prev[0] !== first_number_expected_prev[0] )
		&& ((first_number_expected_prev[0] !== last_first_number_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_number[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_number_expected_prev);
		$display ("     Real value = %b", first_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_first_number_exp[0] = first_number_expected_prev[0];
	end
	if (
		( first_number_expected_prev[1] !== 1'bx ) && ( first_number_prev[1] !== first_number_expected_prev[1] )
		&& ((first_number_expected_prev[1] !== last_first_number_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_number[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_number_expected_prev);
		$display ("     Real value = %b", first_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_first_number_exp[1] = first_number_expected_prev[1];
	end
	if (
		( first_number_expected_prev[2] !== 1'bx ) && ( first_number_prev[2] !== first_number_expected_prev[2] )
		&& ((first_number_expected_prev[2] !== last_first_number_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_number[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_number_expected_prev);
		$display ("     Real value = %b", first_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_first_number_exp[2] = first_number_expected_prev[2];
	end
	if (
		( first_number_expected_prev[3] !== 1'bx ) && ( first_number_prev[3] !== first_number_expected_prev[3] )
		&& ((first_number_expected_prev[3] !== last_first_number_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_number[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_number_expected_prev);
		$display ("     Real value = %b", first_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_first_number_exp[3] = first_number_expected_prev[3];
	end
	if (
		( first_number_expected_prev[4] !== 1'bx ) && ( first_number_prev[4] !== first_number_expected_prev[4] )
		&& ((first_number_expected_prev[4] !== last_first_number_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_number[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_number_expected_prev);
		$display ("     Real value = %b", first_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_first_number_exp[4] = first_number_expected_prev[4];
	end
	if (
		( first_number_expected_prev[5] !== 1'bx ) && ( first_number_prev[5] !== first_number_expected_prev[5] )
		&& ((first_number_expected_prev[5] !== last_first_number_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_number[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_number_expected_prev);
		$display ("     Real value = %b", first_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_first_number_exp[5] = first_number_expected_prev[5];
	end
	if (
		( first_number_expected_prev[6] !== 1'bx ) && ( first_number_prev[6] !== first_number_expected_prev[6] )
		&& ((first_number_expected_prev[6] !== last_first_number_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_number[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_number_expected_prev);
		$display ("     Real value = %b", first_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_first_number_exp[6] = first_number_expected_prev[6];
	end
	if (
		( last_number_expected_prev[0] !== 1'bx ) && ( last_number_prev[0] !== last_number_expected_prev[0] )
		&& ((last_number_expected_prev[0] !== last_last_number_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port last_number[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", last_number_expected_prev);
		$display ("     Real value = %b", last_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_last_number_exp[0] = last_number_expected_prev[0];
	end
	if (
		( last_number_expected_prev[1] !== 1'bx ) && ( last_number_prev[1] !== last_number_expected_prev[1] )
		&& ((last_number_expected_prev[1] !== last_last_number_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port last_number[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", last_number_expected_prev);
		$display ("     Real value = %b", last_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_last_number_exp[1] = last_number_expected_prev[1];
	end
	if (
		( last_number_expected_prev[2] !== 1'bx ) && ( last_number_prev[2] !== last_number_expected_prev[2] )
		&& ((last_number_expected_prev[2] !== last_last_number_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port last_number[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", last_number_expected_prev);
		$display ("     Real value = %b", last_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_last_number_exp[2] = last_number_expected_prev[2];
	end
	if (
		( last_number_expected_prev[3] !== 1'bx ) && ( last_number_prev[3] !== last_number_expected_prev[3] )
		&& ((last_number_expected_prev[3] !== last_last_number_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port last_number[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", last_number_expected_prev);
		$display ("     Real value = %b", last_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_last_number_exp[3] = last_number_expected_prev[3];
	end
	if (
		( last_number_expected_prev[4] !== 1'bx ) && ( last_number_prev[4] !== last_number_expected_prev[4] )
		&& ((last_number_expected_prev[4] !== last_last_number_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port last_number[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", last_number_expected_prev);
		$display ("     Real value = %b", last_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_last_number_exp[4] = last_number_expected_prev[4];
	end
	if (
		( last_number_expected_prev[5] !== 1'bx ) && ( last_number_prev[5] !== last_number_expected_prev[5] )
		&& ((last_number_expected_prev[5] !== last_last_number_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port last_number[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", last_number_expected_prev);
		$display ("     Real value = %b", last_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_last_number_exp[5] = last_number_expected_prev[5];
	end
	if (
		( last_number_expected_prev[6] !== 1'bx ) && ( last_number_prev[6] !== last_number_expected_prev[6] )
		&& ((last_number_expected_prev[6] !== last_last_number_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port last_number[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", last_number_expected_prev);
		$display ("     Real value = %b", last_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_last_number_exp[6] = last_number_expected_prev[6];
	end
	if (
		( Q_A_expected_prev[0] !== 1'bx ) && ( Q_A_prev[0] !== Q_A_expected_prev[0] )
		&& ((Q_A_expected_prev[0] !== last_Q_A_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_A_expected_prev);
		$display ("     Real value = %b", Q_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_A_exp[0] = Q_A_expected_prev[0];
	end
	if (
		( Q_A_expected_prev[1] !== 1'bx ) && ( Q_A_prev[1] !== Q_A_expected_prev[1] )
		&& ((Q_A_expected_prev[1] !== last_Q_A_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_A_expected_prev);
		$display ("     Real value = %b", Q_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_A_exp[1] = Q_A_expected_prev[1];
	end
	if (
		( Q_A_expected_prev[2] !== 1'bx ) && ( Q_A_prev[2] !== Q_A_expected_prev[2] )
		&& ((Q_A_expected_prev[2] !== last_Q_A_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_A_expected_prev);
		$display ("     Real value = %b", Q_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_A_exp[2] = Q_A_expected_prev[2];
	end
	if (
		( Q_A_expected_prev[3] !== 1'bx ) && ( Q_A_prev[3] !== Q_A_expected_prev[3] )
		&& ((Q_A_expected_prev[3] !== last_Q_A_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_A_expected_prev);
		$display ("     Real value = %b", Q_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_A_exp[3] = Q_A_expected_prev[3];
	end
	if (
		( Q_A_expected_prev[4] !== 1'bx ) && ( Q_A_prev[4] !== Q_A_expected_prev[4] )
		&& ((Q_A_expected_prev[4] !== last_Q_A_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_A_expected_prev);
		$display ("     Real value = %b", Q_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_A_exp[4] = Q_A_expected_prev[4];
	end
	if (
		( Q_A_expected_prev[5] !== 1'bx ) && ( Q_A_prev[5] !== Q_A_expected_prev[5] )
		&& ((Q_A_expected_prev[5] !== last_Q_A_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_A_expected_prev);
		$display ("     Real value = %b", Q_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_A_exp[5] = Q_A_expected_prev[5];
	end
	if (
		( Q_A_expected_prev[6] !== 1'bx ) && ( Q_A_prev[6] !== Q_A_expected_prev[6] )
		&& ((Q_A_expected_prev[6] !== last_Q_A_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_A_expected_prev);
		$display ("     Real value = %b", Q_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_A_exp[6] = Q_A_expected_prev[6];
	end
	if (
		( Q_A_expected_prev[7] !== 1'bx ) && ( Q_A_prev[7] !== Q_A_expected_prev[7] )
		&& ((Q_A_expected_prev[7] !== last_Q_A_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_A_expected_prev);
		$display ("     Real value = %b", Q_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_A_exp[7] = Q_A_expected_prev[7];
	end
	if (
		( Q_B_expected_prev[0] !== 1'bx ) && ( Q_B_prev[0] !== Q_B_expected_prev[0] )
		&& ((Q_B_expected_prev[0] !== last_Q_B_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_B_expected_prev);
		$display ("     Real value = %b", Q_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_B_exp[0] = Q_B_expected_prev[0];
	end
	if (
		( Q_B_expected_prev[1] !== 1'bx ) && ( Q_B_prev[1] !== Q_B_expected_prev[1] )
		&& ((Q_B_expected_prev[1] !== last_Q_B_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_B_expected_prev);
		$display ("     Real value = %b", Q_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_B_exp[1] = Q_B_expected_prev[1];
	end
	if (
		( Q_B_expected_prev[2] !== 1'bx ) && ( Q_B_prev[2] !== Q_B_expected_prev[2] )
		&& ((Q_B_expected_prev[2] !== last_Q_B_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_B_expected_prev);
		$display ("     Real value = %b", Q_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_B_exp[2] = Q_B_expected_prev[2];
	end
	if (
		( Q_B_expected_prev[3] !== 1'bx ) && ( Q_B_prev[3] !== Q_B_expected_prev[3] )
		&& ((Q_B_expected_prev[3] !== last_Q_B_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_B_expected_prev);
		$display ("     Real value = %b", Q_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_B_exp[3] = Q_B_expected_prev[3];
	end
	if (
		( Q_B_expected_prev[4] !== 1'bx ) && ( Q_B_prev[4] !== Q_B_expected_prev[4] )
		&& ((Q_B_expected_prev[4] !== last_Q_B_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_B_expected_prev);
		$display ("     Real value = %b", Q_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_B_exp[4] = Q_B_expected_prev[4];
	end
	if (
		( Q_B_expected_prev[5] !== 1'bx ) && ( Q_B_prev[5] !== Q_B_expected_prev[5] )
		&& ((Q_B_expected_prev[5] !== last_Q_B_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_B_expected_prev);
		$display ("     Real value = %b", Q_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_B_exp[5] = Q_B_expected_prev[5];
	end
	if (
		( Q_B_expected_prev[6] !== 1'bx ) && ( Q_B_prev[6] !== Q_B_expected_prev[6] )
		&& ((Q_B_expected_prev[6] !== last_Q_B_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_B_expected_prev);
		$display ("     Real value = %b", Q_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_B_exp[6] = Q_B_expected_prev[6];
	end
	if (
		( Q_B_expected_prev[7] !== 1'bx ) && ( Q_B_prev[7] !== Q_B_expected_prev[7] )
		&& ((Q_B_expected_prev[7] !== last_Q_B_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_B_expected_prev);
		$display ("     Real value = %b", Q_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_B_exp[7] = Q_B_expected_prev[7];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( Y_expected_prev[0] !== 1'bx ) && ( Y_prev[0] !== Y_expected_prev[0] )
		&& ((Y_expected_prev[0] !== last_Y_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[0] = Y_expected_prev[0];
	end
	if (
		( Y_expected_prev[1] !== 1'bx ) && ( Y_prev[1] !== Y_expected_prev[1] )
		&& ((Y_expected_prev[1] !== last_Y_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[1] = Y_expected_prev[1];
	end
	if (
		( Y_expected_prev[2] !== 1'bx ) && ( Y_prev[2] !== Y_expected_prev[2] )
		&& ((Y_expected_prev[2] !== last_Y_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[2] = Y_expected_prev[2];
	end
	if (
		( Y_expected_prev[3] !== 1'bx ) && ( Y_prev[3] !== Y_expected_prev[3] )
		&& ((Y_expected_prev[3] !== last_Y_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[3] = Y_expected_prev[3];
	end
	if (
		( Y_expected_prev[4] !== 1'bx ) && ( Y_prev[4] !== Y_expected_prev[4] )
		&& ((Y_expected_prev[4] !== last_Y_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[4] = Y_expected_prev[4];
	end
	if (
		( Y_expected_prev[5] !== 1'bx ) && ( Y_prev[5] !== Y_expected_prev[5] )
		&& ((Y_expected_prev[5] !== last_Y_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[5] = Y_expected_prev[5];
	end
	if (
		( Y_expected_prev[6] !== 1'bx ) && ( Y_prev[6] !== Y_expected_prev[6] )
		&& ((Y_expected_prev[6] !== last_Y_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[6] = Y_expected_prev[6];
	end
	if (
		( Y_expected_prev[7] !== 1'bx ) && ( Y_prev[7] !== Y_expected_prev[7] )
		&& ((Y_expected_prev[7] !== last_Y_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[7] = Y_expected_prev[7];
	end
	if (
		( Y_expected_prev[8] !== 1'bx ) && ( Y_prev[8] !== Y_expected_prev[8] )
		&& ((Y_expected_prev[8] !== last_Y_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[8] = Y_expected_prev[8];
	end
	if (
		( Y_expected_prev[9] !== 1'bx ) && ( Y_prev[9] !== Y_expected_prev[9] )
		&& ((Y_expected_prev[9] !== last_Y_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[9] = Y_expected_prev[9];
	end
	if (
		( Y_expected_prev[10] !== 1'bx ) && ( Y_prev[10] !== Y_expected_prev[10] )
		&& ((Y_expected_prev[10] !== last_Y_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[10] = Y_expected_prev[10];
	end
	if (
		( Y_expected_prev[11] !== 1'bx ) && ( Y_prev[11] !== Y_expected_prev[11] )
		&& ((Y_expected_prev[11] !== last_Y_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[11] = Y_expected_prev[11];
	end
	if (
		( Y_expected_prev[12] !== 1'bx ) && ( Y_prev[12] !== Y_expected_prev[12] )
		&& ((Y_expected_prev[12] !== last_Y_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[12] = Y_expected_prev[12];
	end
	if (
		( Y_expected_prev[13] !== 1'bx ) && ( Y_prev[13] !== Y_expected_prev[13] )
		&& ((Y_expected_prev[13] !== last_Y_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[13] = Y_expected_prev[13];
	end
	if (
		( Y_expected_prev[14] !== 1'bx ) && ( Y_prev[14] !== Y_expected_prev[14] )
		&& ((Y_expected_prev[14] !== last_Y_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[14] = Y_expected_prev[14];
	end
	if (
		( Y_expected_prev[15] !== 1'bx ) && ( Y_prev[15] !== Y_expected_prev[15] )
		&& ((Y_expected_prev[15] !== last_Y_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[15] = Y_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module GPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [0:7] B;
reg clock;
reg En;
reg reset;
reg w;
// wires                                               
wire [0:6] first_number;
wire [0:6] last_number;
wire [7:0] Q_A;
wire [7:0] Q_B;
wire [3:0] R1;
wire [3:0] R2;
wire [0:6] sign;
wire [0:6] student_id;
wire [0:15] Y;

wire sampler;                             

// assign statements (if any)                          
GPU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.clock(clock),
	.En(En),
	.first_number(first_number),
	.last_number(last_number),
	.Q_A(Q_A),
	.Q_B(Q_B),
	.R1(R1),
	.R2(R2),
	.reset(reset),
	.sign(sign),
	.student_id(student_id),
	.w(w),
	.Y(Y)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// En
initial
begin
	En = 1'b1;
end 

// w
initial
begin
	w = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

GPU_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clock(clock),
	.En(En),
	.reset(reset),
	.w(w),
	.sampler_tx(sampler)
);

GPU_vlg_check_tst tb_out(
	.first_number(first_number),
	.last_number(last_number),
	.Q_A(Q_A),
	.Q_B(Q_B),
	.R1(R1),
	.R2(R2),
	.sign(sign),
	.student_id(student_id),
	.Y(Y),
	.sampler_rx(sampler)
);
endmodule

